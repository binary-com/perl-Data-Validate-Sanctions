#!/usr/bin/perl

use strict;
use warnings;
use Getopt::Long;
use Pod::Usage;
use Data::Validate::Sanctions;

my $help;
my $eu_token;
my $eu_url;
my $sanction_file;

GetOptions(
    "eu_token|token|t=s" => \$eu_token,
    "eu_url|u=s"         => \$eu_url,
    "sanction_file|f=s"  => \$sanction_file,
    'help|?'             => \$help,
);
$sanction_file //= Data::Validate::Sanctions::get_sanction_file();

pod2usage(1) if $help;
unless ($eu_token or $eu_url) {
    print "ERROR: both 'eu_token' and 'eu_url' are missing. One of them is required for EU Sanctions.\n";
    pod2usage(1);
}

my %args = (
    sanction_file => $sanction_file,
    eu_token      => $eu_token,
    eu_url        => $eu_url,
);

Data::Validate::Sanctions->new(%args)->update_data;

__END__

=head1 NAME

update_sanctions_csv

=head1 SYNOPSIS

update_sanctions_csv [options]

 Options:
   -help|?           brief help message
   -eu_token|token|t EU Sanctions token
   -eu_url|u full    EU Sanctions full url (token included)
   -sanction_file|f  Output file to write sanctions

=head1 OPTIONS

=over 4

=item B<-help> or B<-?>: optional

Print a brief help message and exits.

=item B<-eu_token>, B<-token> or B<-t>: required if B<eu_url> is empty

The token required for accessing EU sanctions (usually added as an arg to URL).

=item B<-eu_url> or B<-u>: required if B<eu_token> is empty

EU Sanctions full url, token included.

=item B<-sanction_file> or B<-f>: optional

Output file to write sanctioned names into.

=back

=head1 DESCRIPTION

This program retrieves sanction lists from all sources and saves them to the B<sanction file>.
EU sanctions cannot be trieved without a token; so the program should be executed either
with a B<eu_token> or B<eu_url> argument.

=cut
